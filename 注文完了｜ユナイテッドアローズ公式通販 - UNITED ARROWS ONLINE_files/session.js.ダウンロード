var sessionModule = sessionModule || (function () {
  // var COOKIE_SERIALNUMBER = 'SERIALNO';
  var COOKIE_EXPIRY = new Date(3000, 0, 1); /* 3000年1月1日 */
  var STORAGE_SERIALNUMBER = 'efs_duid';
  var COOKIE_SERIALNUMBER = 'efs_duid';
  var COOKIE_SERIALNUMBER_ALT = 'ua_vid'; // 環境固有名
  var COOKIE_RECOMMEND_PERSIST = 'SET_RCMDID';
  var STORAGE_RECOMMEND_PERSIST = 'efs_set_rcmdid';

  /* 
  * ログアウトしていることを表すCookie名. 
  * 1:会員ログオフ操作が行われた
  * 2:一旦ログインした 
  * 存在しない:新規導入としてログイン状態初回とみなす
  */
  var COOKIE_LOGOUT_STATUS = 'EFS_LOGOUTED';
  var STORAGE_LOGOUT_STATUS = 'efs_logouted';
  var enterLoggedIn = false; /* このリクエスト内でログイン状態に移行したと判断した際に true に設定される */

  /* 
  * localStorageのget関数（error発生時にcatchするための関数）
  */
  function getLocalStorage(storageKey) {
    try {
      return localStorage.getItem(storageKey);
    } catch (e) {
      console.warn(e, "localStorageをgetできません");
      return null;
    }
  }

  /* 
  * localStorageのset関数（error発生時にcatchするための関数）
  */
  function setLocalStorage(storageKey, storageData) {
    try {
      localStorage.setItem(storageKey, storageData);
    } catch (e) {
      console.warn(e, "localStorageをsetできません");
    }
  }

  /* 
  * Safari ITP2.1対応（Cookie7日間問題対応） R#74616
  * 一旦Cookieに入っているデータをlocalStorageに保持する（Cookieは削除しない）
  */
  function copyLocalStorage(cookieKey, storageKey) {
    var storageData = getLocalStorage(storageKey);
    if (!storageData) {
      var cookieData = Cookies.get(cookieKey);
      if (cookieData) {
        setLocalStorage(storageKey, cookieData);
      }
    }
  }
  copyLocalStorage(COOKIE_RECOMMEND_PERSIST, STORAGE_RECOMMEND_PERSIST);
  copyLocalStorage(COOKIE_SERIALNUMBER, STORAGE_SERIALNUMBER);
  copyLocalStorage(COOKIE_LOGOUT_STATUS, STORAGE_LOGOUT_STATUS);

  // ログアウト時のレコメンド計測用localStorageの更新(ログアウト時はクリアして次回アクセス時に訪問者IDを設定)
  function clearRecommendData() {
    localStorage.removeItem(STORAGE_RECOMMEND_PERSIST);
  }

  // レコメンド計測用localStorageは未設定であればその時点の訪問者IDを入れる。
  // （rcmdidは別jsでも使用されているためCookieにも保持する）
  function ensureRecommendData() {
    var recommendData = getLocalStorage(STORAGE_RECOMMEND_PERSIST);
    if (!recommendData) {
      recommendData = Cookies.get(COOKIE_RECOMMEND_PERSIST) || visitorId;
      setLocalStorage(STORAGE_RECOMMEND_PERSIST, visitorId);
    }
    Cookies.set(COOKIE_RECOMMEND_PERSIST, recommendData, {
      expires: COOKIE_EXPIRY
    });
  }

  // シリアル番号localStorageは未設定であればその時点の訪問者ID + タイムスタンプを入れる。
  // （duidは別jsでも使用されているためCookieにも保持する）
  function ensureSerialNumData() {
    var serialNumData = getLocalStorage(STORAGE_SERIALNUMBER);
    if (!serialNumData) {
      serialNumData = Cookies.get(COOKIE_SERIALNUMBER) || visitorId + '.' + new Date().getTime();
      setLocalStorage(STORAGE_SERIALNUMBER, serialNumData);
    }
    Cookies.set(COOKIE_SERIALNUMBER, serialNumData, {
      expires: COOKIE_EXPIRY
    });

    Cookies.set(COOKIE_SERIALNUMBER_ALT, serialNumData, {
      expires: COOKIE_EXPIRY
    });
    return serialNumData;
  }

  // ログイン状態をlocalStorage(Cookie)に保存しておく。1:会員ログオフ操作が行われた、2:一旦ログインした
  function setLogoutStatus(logoutStatus) {
    setLocalStorage(STORAGE_LOGOUT_STATUS, logoutStatus);
  }

  /**
   * 現在ログイン状態なら ture を返す。
   * 【前提】
   * HTML内に会員の情報を表すJS変数が適切に設置されていること。
   * 
   * @returns ログイン状態なら true
   */
  function isLoggedIn() {
    if (typeof customerId !== 'undefined') {
      return customerId !== null && customerId.length > 0;
    }
    return false;
  }

  /**
   * このブラウザ内でログイン状態になって初回のリクエスト中であればtrueを返す。
   * この仕組が一度も実行されていない(cookieが存在しない）場合もログイン状態であれば初回は実行されるため、
   * 必ずしもログインした瞬間のタイミングではないことに注意。
   * 
   * @returns このブラウザ内でログイン状態になって初回のリクエスト中であればtrueを返す
   */
  function isEnteredLoggedIn() {
    return enterLoggedIn;
  }

  /**
   * ログイン状態をJSから利用するための状態維持を行う。
   * localStorage状態の維持と初回ログインの状態の設定。
   */
  function ensureLoginStatus() {
    if (isLoggedIn()) { // ログイン状態の場合
      var logoutStatus = getLocalStorage(STORAGE_LOGOUT_STATUS);
      if (!logoutStatus || logoutStatus === "1") { // 存在しない or 0（無効値）or ログアウトした状態
        // 画面からのログアウト処理が行われていた、あるいは、ログイン状態管理導入後の初回のときは
        // enterLoggedInをtrueにして、このリクエスト中はログイン後の初回であることを保持(シャロー状態を含む)。
        enterLoggedIn = true;
      }
      // ログイン状態になっていたらlocalStorageに状態を反映しておく
      setLogoutStatus("2");
    }
  }

  function onLogout() {
    clearRecommendData();
    // ログアウトしたことをlocalStorageに保存しておく。1:画面からログアウトした。
    setLogoutStatus("1");
  }

  function onAccess() {
    ensureLoginStatus();
    ensureRecommendData();
    ensureSerialNumData();
  }

  return {
    onAccess: onAccess,
    onLogout: onLogout,
    isLoggedIn: isLoggedIn,
    isEnteredLoggedIn: isEnteredLoggedIn,
  }
})();
// 毎回アクセス
sessionModule.onAccess();

